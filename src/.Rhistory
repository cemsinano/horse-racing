knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(Amelia)
library(GGally)
library(readr)
library(nnet)
library(knitr)
library(feather)
glm_model <- glm(winner ~ as.factor(hnum) + name + driver +
trainer + cond + temp + as.factor(date),
data=dat)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(Amelia)
library(GGally)
library(readr)
library(nnet)
library(knitr)
library(feather)
# Read Condition3.csv and Results3.csv files into tibble objects:
conditions <- read_csv("../data/Conditions3.csv")
results <- read_csv("../data/Results3.csv")
# check if datasets are loaded correctly:
head(conditions) %>% kable()
head(results) %>% kable()
# Read the 9th race on 2016-04-29 information:
final_race <- read_table2(file="../data/final_race.txt", col_names = TRUE, comment="=")
final_race  %>% kable()
conditions %>% summary() %>% kable()
# unique values for track conditions:
unique(conditions$cond)
results %>% summary()
# check if there are any na values in both datasets:
sum(is.na(conditions))
sum(is.na(results))
# check if we have multiple cond and temp entries for a single day:
multiple_cond <- conditions %>%
group_by(date) %>%
summarise(date_count = n()) %>%
filter(date_count>1)
# Check out the dates with multiple cond and/or temp entries:
multiple_cond %>% kable()
conditions %>% filter(date %in% multiple_cond$date) %>%
ggplot() + geom_point(aes(date, temp, color = cond), alpha = 0.5) +
ggtitle("Dates with Multiple Temprature or Track Conditions")
# drop "2016-04-29" since it is the day for our final race:
multiple_cond <- multiple_cond %>%
filter(date != "2016-04-29")
# drop other multiple_cond dates from conditions:
conditions <- conditions %>%
filter(!(date %in% multiple_cond$date))
# It is a jugdement call! Keep cond for this date as "SN":
conditions$cond[conditions$date == "2016-04-29"] <- "SN"
# Join conditions data into results
dat <- dplyr::left_join(results, conditions, by = "date")
# Glimpse joined data:
dat %>% glimpse()
# check if there are any missing values after left_join:
sum(is.na(dat))
# Visualise the missing values:
missmap(dat,
main = "Missingness Map of Dataset after Join",
y.labels = NULL,
y.at = NULL)
dat <- dat %>%
filter(!(date %in% multiple_cond$date))
# Find out values around "2016-02-01":
dat %>% filter(is.na(cond) == T) %>%
select(date,cond,temp) %>%
unique() %>%
kable()
# Find out the date of Missing Value:
dat %>% filter(date > "2016-01-16" & date <"2016-02-16") %>% select(date,cond,temp) %>% unique()
# Fill missing values for "2016-02-01":
dat$cond[dat$date == "2016-02-01"] <- "FT"
dat$temp[dat$date == "2016-02-01"] <- 24
# Function to pass into (to get a linear line and smaller points as default is not printing legible results)
g_fun <- function(data, mapping, ...){
p <- ggplot(data = data, mapping = mapping) +
geom_point(size =0.25) +
geom_smooth(method=lm, fill="blue", color="blue", ...)
p
}
# Get ggpairs plots for "odds", "cond", "temp","seconds", "racenum","hnum", "pos" variables:
g <-  suppressMessages(ggpairs(dat,
columns = c("odds", "cond", "temp","seconds", "racenum","hnum"),
lower = list(continuous =  wrap(g_fun, binwidth = c(5, 0.5)))) +
theme_bw())
suppressMessages(print(g)) # to get rid of message used suppressMessages(print(...))
dat %>% ggplot() +
geom_point(aes(date,
seconds,
color = racenum))+
xlab("Date") +
xlab("Date") +
ggtitle("Date vs Race Duration")
dat %>% filter(seconds > 140) %>% select(racenum) %>% unique() %>% kable()
# drop racenum 4:
dat <- dat %>% filter(racenum != 4)
final_race["cond"] <- unique(dat$cond[dat$date== "2016-04-29"])
final_race["temp"] <- unique(dat$temp[dat$date== "2016-04-29"])
final_race["date"] <- "2016-04-29"
dat <- dat %>%
filter(driver %in% final_race$driver |
name %in% final_race$name |
trainer %in% final_race$trainer)
print(paste("Number of rows for the final subset data is", nrow(dat)))
# create the winner variable:
dat <- dat %>% mutate(winner = ifelse(pos == 1 , 1, 0))
# Write subset data into feather to read in Python:
path <- "../data/sub_data.feather"
write_feather(dat, path)
# Run the Logistic model:
# `multinom` function for logistic regression for binary response:
log_model <- multinom(winner ~ as.factor(hnum) + name + driver +
trainer + cond + temp + as.factor(date),
data=dat, trace = FALSE)
# summary(log_model) # as there are too many levels it is not feasible to print
pred_probs <- predict(log_model,final_race,"probs")
final_probs <- data_frame(name = final_race$name, pred_probs, odds = final_race$odds)
# Normalize probabilities of each horse to be winner or not to make total probality 1:
final_probs <-final_probs %>% mutate(pred_probs = pred_probs/sum(pred_probs))
final_probs %>% mutate(expected_return = pred_probs*odds-1) %>% kable()
glm_model <- glm(winner ~ as.factor(hnum) + name + driver +
trainer + cond + temp + as.factor(date),
data=dat)
summary(log_odds_mod)
glm_model
augment(glm_model, type.predict = "response")
augment(glm_model)
??augment
library(broom)
augment(glm_model)
augment(glm_model, type.predict = "response" )
# Read the 9th race on 2016-04-29 information:
final_race <- read_table2(file="../data/final_race.txt", col_names = TRUE, comment="=")
final_race  %>% kable()
conditions %>% summary() %>% kable()
# unique values for track conditions:
unique(conditions$cond)
conditions
# Check out the dates with multiple cond and/or temp entries:
multiple_cond %>% kable()
dat
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(Amelia)
library(GGally)
library(readr)
library(nnet)
library(knitr)
library(feather)
# Read Condition3.csv and Results3.csv files into tibble objects:
conditions <- read_csv("../data/Conditions3.csv")
results <- read_csv("../data/Results3.csv")
# check if datasets are loaded correctly:
head(conditions) %>% kable()
head(results) %>% kable()
# Read the 9th race on 2016-04-29 information:
final_race <- read_table2(file="../data/final_race.txt", col_names = TRUE, comment="=")
final_race  %>% kable()
conditions %>% summary() %>% kable()
# unique values for track conditions:
unique(conditions$cond)
results %>% summary()
# check if there are any na values in both datasets:
sum(is.na(conditions))
sum(is.na(results))
# check if we have multiple cond and temp entries for a single day:
multiple_cond <- conditions %>%
group_by(date) %>%
summarise(date_count = n()) %>%
filter(date_count>1)
# Check out the dates with multiple cond and/or temp entries:
multiple_cond %>% kable()
conditions %>% filter(date %in% multiple_cond$date) %>%
ggplot() + geom_point(aes(date, temp, color = cond), alpha = 0.5) +
ggtitle("Dates with Multiple Temprature or Track Conditions")
# drop "2016-04-29" since it is the day for our final race:
multiple_cond <- multiple_cond %>%
filter(date != "2016-04-29")
# drop other multiple_cond dates from conditions:
conditions <- conditions %>%
filter(!(date %in% multiple_cond$date))
# It is a jugdement call! Keep cond for this date as "SN":
conditions$cond[conditions$date == "2016-04-29"] <- "SN"
# Join conditions data into results
dat <- dplyr::left_join(results, conditions, by = "date")
# Glimpse joined data:
dat %>% glimpse()
# check if there are any missing values after left_join:
sum(is.na(dat))
# Visualise the missing values:
missmap(dat,
main = "Missingness Map of Dataset after Join",
y.labels = NULL,
y.at = NULL)
dat <- dat %>%
filter(!(date %in% multiple_cond$date))
# Find out values around "2016-02-01":
dat %>% filter(is.na(cond) == T) %>%
select(date,cond,temp) %>%
unique() %>%
kable()
# Find out the date of Missing Value:
dat %>% filter(date > "2016-01-16" & date <"2016-02-16") %>% select(date,cond,temp) %>% unique()
# Fill missing values for "2016-02-01":
dat$cond[dat$date == "2016-02-01"] <- "FT"
dat$temp[dat$date == "2016-02-01"] <- 24
# Function to pass into (to get a linear line and smaller points as default is not printing legible results)
g_fun <- function(data, mapping, ...){
p <- ggplot(data = data, mapping = mapping) +
geom_point(size =0.25) +
geom_smooth(method=lm, fill="blue", color="blue", ...)
p
}
# Get ggpairs plots for "odds", "cond", "temp","seconds", "racenum","hnum", "pos" variables:
g <-  suppressMessages(ggpairs(dat,
columns = c("odds", "cond", "temp","seconds", "racenum","hnum"),
lower = list(continuous =  wrap(g_fun, binwidth = c(5, 0.5)))) +
theme_bw())
suppressMessages(print(g)) # to get rid of message used suppressMessages(print(...))
dat %>% ggplot() +
geom_point(aes(date,
seconds,
color = racenum))+
xlab("Date") +
xlab("Date") +
ggtitle("Date vs Race Duration")
dat %>% filter(seconds > 140) %>% select(racenum) %>% unique() %>% kable()
# drop racenum 4:
dat <- dat %>% filter(racenum != 4)
final_race["cond"] <- unique(dat$cond[dat$date== "2016-04-29"])
final_race["temp"] <- unique(dat$temp[dat$date== "2016-04-29"])
final_race["date"] <- "2016-04-29"
dat <- dat %>%
filter(driver %in% final_race$driver |
name %in% final_race$name |
trainer %in% final_race$trainer)
print(paste("Number of rows for the final subset data is", nrow(dat)))
# create the winner variable:
dat <- dat %>% mutate(winner = ifelse(pos == 1 , 1, 0))
# Write subset data into feather to read in Python:
path <- "../data/sub_data.feather"
write_feather(dat, path)
# Run the Logistic model:
# `multinom` function for logistic regression for binary response:
log_model <- multinom(winner ~ as.factor(hnum) + name + driver +
trainer + cond + temp + as.factor(date),
data=dat, trace = FALSE)
# summary(log_model) # as there are too many levels it is not feasible to print
pred_probs <- predict(log_model,final_race,"probs")
final_probs <- data_frame(name = final_race$name, pred_probs, odds = final_race$odds)
# Normalize probabilities of each horse to be winner or not to make total probality 1:
final_probs <-final_probs %>% mutate(pred_probs = pred_probs/sum(pred_probs))
final_probs %>% mutate(expected_return = pred_probs*odds-1) %>% kable()
library(broom)
glm_model <- glm(winner ~ as.factor(hnum) + name + driver +
trainer + cond + temp + as.factor(date),
data=dat)
augment(glm_model, type.predict = "response" )
# Run the Multinomial model:
# `multinom` function for logistic regression for binary response:
multinom_model <- multinom(pos~as.factor(hnum)+ name + driver +
trainer + cond + temp + as.factor(date),
data=dat, MaxNWts = 7000, trace = FALSE)
# Probabilities of positions:
pred_probs_mul <- predict(multinom_model,final_race,"probs")
# Probabilities of being the winner for all horses can be extracted from: pred_probs_mul[,1]
# create a dataframe to summarize final probabilities:
final_probs_multi <- data_frame(name = final_race$name, pred_probs = pred_probs_mul[,1],
odds = final_race$odds)
# Normalize winning probabilities:
final_probs_multi <- final_probs_multi %>% mutate(pred_probs = pred_probs/sum(pred_probs))
# summary table with expected return for Softmax Model:
final_probs_multi %>% mutate(expected_return = pred_probs*odds-1) %>% kable()
head(dat)
da %>% mutate(log_odds = log(odds))
dat %>% mutate(log_odds = log(odds))
dat<- dat %>% mutate(log_odds = log(odds))
lm(log_odds ~ as.factor(hnum) + name + driver +
trainer + cond + temp + as.factor(date),
data=dat)
lm(log_odds ~ hnum + name + driver +
trainer + cond + temp + date,
data=dat)
lm(log_odds ~ as.factor(hnum) + name + driver +
trainer + cond + temp + as.factor(date),
data=dat)
lm(log_odds ~ as.factor(hnum) + name + driver +
trainer + cond + temp,
data=dat)
lm(log_odds ~ as.factor(hnum) + name + driver +
cond + temp,
data=dat)
summary(lm_model)
summary(lm_model)
lm_model <- lm(log_odds ~ as.factor(hnum) + name + driver +
cond + temp,
data=dat)
summary(lm_model)
predict(lm_model,final_race)
predicted_lodss <- predict(lm_model,final_race)
exp(predicted_lodss)
final_race
exp(predicted_lodss)
final_race$odds - exp(predicted_lodss)
exp(predicted_lodss) - final_race$odds
exp(predicted_lodss) - final_race$odds
log_odds
dat
sum(pred_probs)
pred_probs
final_probs
sum(final_probs(pred_probs))
sum(final_probs$pred_probs)
